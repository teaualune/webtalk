section
    h1 CSS 與排版
    table(style="border:0;"): tbody: tr
        td: ul
            li Box Model
            li block 與 inline
            li Normal Flow
            li relative 與 absolute
            li float 與 clear
        td: ul
            li Pseudo Element
            li stacking context 與 z-index
            li grid 系統
            li flexbox
section
    h2 DOM 的視覺呈現：Box Model
section
    h2 Block-level &amp; Inline-level
section
    h2 網頁的排版原則：Normal Flow
section
    section
        h3: code position: relative;
    section
        h3: code position: absolute;
    section
        h3 混用技巧
section
    section
        h3: code float: left;
    section
        h3: code clear: left;
    section
        h3 Float 的問題
    section
        h3 Clearfix
section
    h2 Pseudo Element
section
    section
        h3 Stacking Context
    section
        h3 z-index
section
    h2 網頁的 grid 系統
section
    h2 CSS3 排版新招：flexbox

section
    h1 CSS 實踐技巧
    ul
        li 精簡寫法
        li Specificity
        li 跨平台問題
        li Selector Best Practices
        li 使用 preprocessor
        li 好用資源介紹 (caniuse)
section
    h3 精簡寫法
    h1 TODO
section
    h3 CSS Specificity
    section
        p 當兩個規則打架時，如何決定該採用哪一個？
        pre: code
            | a {
            |   color: #00f;
            | }
            | &nbsp;
            | a.active {
            |   color: #f00;
            | }
    section
        p 數個數
        table(style="font-size:75%;")
            thead: tr
                th
                th Inline style
                th ID
                th Class &amp; pseudo class
                th Tag name &amp; pseudo element
            tbody
                tr
                    td 範例
                    td: pre: code &lt;a style="color:#f00;"&gt;
                    td
                        code #header
                        | ,&nbsp;
                        code #section1
                    td
                        code .active
                        | ,&nbsp;
                        code :hover
                    td
                        code div
                        | ,&nbsp;
                        code ::before
                tr
                    td 分數比重
                    td 1000
                    td 100
                    td 10
                    td 1
    section
        p 計算加權分數：
        ul
            li
                | 例一：
                br
                code a.active
                br
                |  有 1 個 element、1 個 class，分數為 1 * 1 + 1 * 10 = 11
            li
                | 例二：
                br
                code .bs-docs-nav .navbar-nav&gt;li&gt;a:hover
                br
                |  有 2 個 element、2 個 class、1 個 pseudo class，分數為 2 * 1 + (2+1) * 10 = 32
    section
        ul
            li
                | 分數一樣的話，依照網頁的讀取順序，
                b 新的
                | 規則會把舊的規則覆蓋掉
            li 當某個規則（例如 color）沒被宣告時，則參考母元素的規則
section
    h3 跨平台問題
    h1 TODO
section
    h3 Selector 該如何寫好？
    ul
        li 在大型專案中，很容易會將 CSS 越寫越複雜
        li 分數越高的規則需要用更高分數的規則覆蓋，因此 HTML 跑出更多 class、更多 ID，產生惡性循環
        li 太多互相覆蓋的規則造成 debug、需求修改困難 (tight coupling)
section
    h3 Some Best Practices
    section
        p 從 HTML 結構開始思考
        ul
            li 規劃頁面時，以 HTML 結構為主，搭配 CSS 輔助，避免交付 CSS 太多可以在 HTML 就做好的事情
            li 避免單一化的 HTML 結構，例如所有東西都用 div 進行排版
            li 考慮元素本身的語意（semantics）進行頁面構築，例如避免將標題、內文都用 p 元素
    section
        p 撰寫 selector 時，考慮頁面架構來設計 selector
        p Bad example:
        table(style="border:0;"): tbody: tr
            td: pre: code.html
                | &lt;article class="item"&gt;
                |   &lt;header class="item-header"&gt;
                |     &lt;h1 class="item-title"&gt;人氣商品特價拍賣中&lt;/h1&gt;
                |   &lt;/header&gt;
                | &lt;/article&gt;
            td: pre: code
                | .item .item-header .item-title {
                |   color: #343435;
                |   margin-top: 25px;
                | }
    section
        p Good example:
        table(style="border:0;"): tbody: tr
            td: pre: code
                | &lt;article class="item"&gt;
                |   &lt;header&gt;
                |     &lt;h1&gt;人氣商品特價拍賣中&lt;/h1&gt;
                |   &lt;/header&gt;
                | &lt;/article&gt;
            td: pre: code
                | .item h1 {
                |   color: #343435;
                |   margin-top: 25px;
                | }
        ul
            li
                code .item h1
                |  本身
                span.color-red 直接意味著
                | 要選擇&nbsp;
                code .item
                |  裡面的大標題，因此不需要多餘的 class 作為輔助
    section
        p 避免太複雜的疊床架屋
        ul
            li 當 selector 內出現四個或以上數量的元素時，就該考慮進行重構（refactor）
            li 避免使用 inline style，因為他們難以追蹤又無法覆蓋
            li
                span.color-red 不要
                | 在 selector 裡面出現 ID
                ul
                    li ID 是讓 JS 方便進行 DOM 操作、以及和 URL fragment 配合
                    li 特例：CSS namespacing
            li
                | 通常權重過高的 selector 是用來
                b 處理特殊狀況（edge case）
                ul
                    li 意即，當有多個元件的樣式相同、但有少數元件有特別的樣式呈現時，針對這些特別樣式再撰寫更高的 selector 進行覆蓋
                    li 例如先前的 a 和 a.active
    section
        p 抽取共通的規則出去成為新的 selector
        ul
            li 若發現很多重複的規則出現在不同的 selector 裡面，可以考慮抽取出來用新的 class 代表
            li 這就是 CSS Library 撰寫的思維（component based CSS）
            li 也可以用 helper class 去思考，例如常見的 .pull-left、.clearfix 等
            li: a(href="http://getbootstrap.com/css/#buttons-options", target="_blank") 以 Bootstrap 按鈕為例
    section
        p 其他方法
        ul
            li 進入 CSS preprocessor 的世界
            li
                | 使用&nbsp;
                a(href="https://css-tricks.com/bem-101/", target="_blank") BEM Methodology
                |  對 class 名稱正規化
            li
                | 對 webpack 生態系熟悉的下一步：
                a(href="http://glenmaddern.com/articles/css-modules", target="_blank") CSS Modules
section
    section
        h2 CSS Preprocessor
        ul
            li 類似 CSS 的程式語言，但他們可以 compile 成 CSS
            li 常見的有 LESS、Sass、SCSS、Stylus
            li 可以使用巢狀結構、定義變數、導入（import）其他文件，就像真正的程式語言一樣
            li.color-red 可大幅簡化 CSS 撰寫困難度！
    section
        h3 Example (LESS.js)
        p 搭配 lesshat 同時做到跨平台
        table
            thead: tr
                th LESS
                th CSS
            tbody: tr
                td: pre: code
                    | @import "lesshat.less";
                    | &nbsp;
                    | @active-color: #337ab7;
                    | &nbsp;
                    | a {
                    |   color: black;
                    |   background-color: transparent;
                    |   .transition(color .3s linear, background-color .3s ease);
                    | &nbsp;
                    |   &amp;.active, &amp;:hover {
                    |     color: @active-color;
                    |     background-color: fadeout(@active-color, 50%);
                    |   }
                    | }
                td: pre: code
                    | a {
                    |   color: black;
                    |   background: transparent;
                    |   -webkit-transition: color .3s  linear, background-color .3s ease;
                    |   -moz-transition: color .3s  linear, background-color .3s ease;
                    |   -o-transition: color .3s  linear, background-color .3s ease;
                    |   transition: color .3s  linear, background-color .3s ease;
                    | }
                    | &nbsp;
                    | a.active, a:hover {
                    |   color: #337ab7;
                    |   background: rgba(51, 122, 183, .5);
                    | }

section
    h1 網頁排版技巧
    ul
        li 排版思維
        li Reset &amp; Normalize
        li 使用 grid 系統
        li 垂直置中
        li relative &plus; absolute
        li 範例探討

section
    h1 Responsive Web Design (RWD) 淺談
    ul
        li Mobile First
        li Viewport
        li vw &amp; vh
