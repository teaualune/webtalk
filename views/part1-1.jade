section
    h1 網頁運作原理
    h2 How Web Pages Work
section
    section
        h3 在 how 之前&hellip;
        h3
            span.color-red What
            |  is a web page?
    section
        p 現代的網頁大致是以三種語言寫成：
        ol
            li HTML
            li CSS
            li JavaScript
    section
        h3 1. HTML
        pre: code
            | &lt;p&gt;
            |   The current time is &lt;b&gt;13:00&lt;/b&gt;!
            | &lt;/p&gt;
        img(src="images/1-1-html.png")
    section
        h3 2. CSS
        pre: code
            | b {
            |   font-size: 150%;
            |   color: red;
            |   vertical-align: middle;
            | }
        img(src="images/1-1-css.png")
    section
        h3 3. JavaScript
        pre: code
            | &lt;p&gt;
            |   The current time is &lt;b id="time"&gt;&lt;/b&gt;!
            | &lt;/p&gt;
        pre: code
            | var time = document.getElementById('time');
            | function setTime () {
            |   var now = new Date();
            |   var hour = now.getHours();
            |   var minute = now.getMinutes();
            |   hour = (hour &lt; 10 ? '0' : '') + hour;
            |   minute = (minute &lt; 10 ? '0' : '') + minute;
            |   time.innerText = hour + ':' + minute;
            | }
            | setInterval(setTime, 60000);
            | setTime();
        img(src="images/1-1-js.png")
        br
        a(href="https://jsfiddle.net/m0L31gLb", target="_blank"): small https://jsfiddle.net/m0L31gLb
section
    h2 使用者如何「使用」網頁？
section
    section
        h3 使用者觀點&hellip;
        ol
            li 在瀏覽器輸入網址
            li 網頁開始從伺服器載入
            li 等待轉圈圈停下來（載入完成）
    section
        h3 放大來看&hellip;
        ol
            li 瀏覽器發出包含 URL 的 HTTP 請求（Request）
            li 經由網際網路的 DNS 來鎖定 URL 指定的伺服器（Server）位置，也就是 IP
            li 伺服器回傳對應的 HTTP 回應（Response）
            li 瀏覽器接收包含 HTML 的 HTTP 回應
            li 瀏覽器將 HTML 繪製（Render）到頁面上
    section
        h3 所以接下來會介紹的名詞包括
        ol
            li URL
            li IP
            li DNS
            li HTTP Request
            li HTTP Response
        p 然後才是 HTML, CSS 和 JavaScript

section
    h3 Universal Resource Locator (URL)
    section: ul
        li 就是俗稱的網址
        li 通常會指向某個伺服器底下的資源
    section
        pre
            span(style="color:red;") https
            | ://
            span(style="color:orange;") www.himelight.com
            span(style="color:green;") /user/teaualune
            span(style="color:blue;") ?mobile=yes&amp;static
            span(style="color:purple;") #highlights
        ul
            li
                span(style="color:red;") Protocol
                | : HTTP 或 HTTPS
            li
                span(style="color:orange;") Domain
                | : www.himelight.com 或 52.74.40.157
            li Port: 一般都省略，預設為 80 或 443
            li
                span(style="color:green;") Path
                | : 斜線後面的部份，可以想像成伺服器內部的層級結構
            li
                span(style="color:blue;") Query
                | : 問號後面的部份，用 &amp; 銜接很多個
            li
                span(style="color:purple;") Fragment
                | : 井字號後面的部份，表示頁面上的區塊
section
    h3 Internet Protocol (IP)
    ul
        li 代表網際網路上伺服器的位址（address）
        li
            b IPv4
            | : 由四個數字（0 ~ 255）組成，所以有 2
            sup 32
            | 個位址可用
        li
            | 樓上已經
            a(href="https://zh.wikipedia.org/wiki/IPv4位址枯竭", target="_blank") 被全世界用光了
            | ，因此接下來是使用
            b  IPv6
            | ，共有 2
            sup 128
            | 個位址可用
        li
            | 範例：
            a(href="52.74.40.157", target="_blank") 52.74.40.157
section
    h3 Domain Name System (DNS)
    ul
        li 存在於網際網路中的中繼伺服器，用來把 domain 翻譯成 IP
        li
            | 簡單的網路攻擊：
            a(href="http://www.techbang.com/posts/13281-taiwan-anonymous-hack-philippine", target="_blank") 把 DNS 打爆，讓網址連不到實際的伺服器
section
    section
        h3 HyperText Transfer Protocol (HTTP)
        ul
            li 目前最常見的網路通訊協定之一，主要用於跨網際網路的資源存取
            li
                | 一次 HTTP 連線分成 Request 和 Response 兩個部分
                ul
                    li
                        | 請求方開啟連線，發出&nbsp;
                        b Request
                        |  並等待回應
                    li
                        | 伺服器收到後回傳&nbsp;
                        b Response
                        |  並關閉此次連線
            li
                | 每個 request/response 由 Header 和 Body 兩部分組成：
                ul
                    li Header 擺放想告訴 server / server 回傳的資訊（metadata）
                    li Body 擺放要傳送給 server / server 回傳的資料
    section
        h3 HTTP Request
        ul
            li
                | 有 GET, POST, PUT, DELETE, OPTIONS 等不同的
                b 請求類型
            li 只有 POST 和 PUT 有 request body，其他類型只有 header
            li 傳統上以 GET 向 server 要求資源、用 POST 向 server 發出表單
    section
        h3 Request Header 會送出的資訊
        ul
            li Cookie: 存在瀏覽器內，對應此網頁的靜態資料。通常用來作登入機制
            li
                | User-Agent: 告訴 server 自己是誰（什麼瀏覽器、什麼 OS、版本號 etc）
                ul
                    li Server 可用來辨識瀏覽器類型
                    li: a(href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg", target="_blank") 可假造，方便 debug
                    li 不良的瀏覽器可能會亂給
            li
                | Referer: 本次 request 是受誰介紹而來
                ul
                    li 例：從 Google 搜尋點開連結，referer 會是 Google
                    li: a(href="http://picsee.co", target="_blank") 可用來判斷 request 來源以做出不同回應
    section
        h3 Response Header 會附帶的資訊
        ul
            li Status code: 以代碼表示本次連線結果，數值從 200 到 500 以上各句意義
            li
                | Content-Type: response body 的類型
                ul
                    li 可以是 text/html、image/png 等
                    li 瀏覽器會依據此資訊來對 body 做處理，例如若收到 image/png 便將內容視為圖片
            li Set-Cookie: 要設定到瀏覽器 cookie 的資訊
            li Server: server 資訊
            li Cache-Control: 告訴瀏覽器是否要將此頁面緩存起來
    section
        h3 常見的 Status Code
        ul(style="font-size:90%;")
            li
                b 2xx
                | : 代表成功
                ul
                    li 200: OK
                    li 204: No Content（成功但 response body 是空的）
            li
                b 3xx
                | : 代表重新導向（redirect）
            li
                b 4xx
                | : 代表用戶出錯
                ul
                    li 401: Unauthorized（權限不夠存取此資源）
                    li 403: Forbidden（用戶不能存取此資源）
                    li 404: Not Found
                    li 413: Request Entity Too Large（request body 太大，例如上傳圖片超過規定大小）
                    li 418: I'm a Teapot
            li
                b 5xx
                | : 代表 server 出錯
                ul
                    li 501: Internal Server Error（反正 server 出問題就對了）
                    li 503: Service Unavailable（server 目前斷線中）

section
    h1 網頁的三大要素
    h3: ul
        li HTML
        li CSS
        li JavaScript
section
    section
        h3 HyperText Markup Language (HTML)
        ul
            li 由許多的標籤（tag，或稱元素）聚合而成，標籤的寫法是 &lt;TAG&gt;...&lt;/TAG&gt;
            li HTML 提供了不同功能的標籤用以組合成實際看到的網頁
            li 可以看成網頁的骨架
    section
        h3 Cascading Style Sheets (CSS)
        ul
            li 一套用來描述網頁外觀的語法
            li
                | 每個敘述分成
                span.color-red 選擇器（selector）
                | 和
                span.color-red 規則（rule）
                | 兩部分
            li 瀏覽器使用 selector 選擇出 HTML 上符合的元素，並將規則套用至這些元素上
    section
        h3 JavaScript
        ul
            li 網頁上真正可運作的程式語言（programming language）
            li 一開始被用來操作網頁元素達到互動效果，後來發展的越來越複雜
            li 現在是最熱門的程式語言之一，除了網頁也可藉由 Node.js 用來開發 server
section
    section
        h2 認識 HTML 結構
        ul
            li HTML 語法上是 XML 的子類，由多個 tag 組合而成
            li 基本結構為 html 包著 head 和 body:
        pre: code
            | &lt;html&gt;
            |   &lt;head&gt;
            |   &lt;/head&gt;
            |   &lt;body&gt;
            |   &lt;/body&gt;
            | &lt;/html&gt;
    section
        h3 &lt;head&gt;
        ul
            li &lt;head&gt; 內部的元素不會呈現於畫面，而是用於輔助網頁
            li &lt;title&gt; 為網頁的標題
            li
                | &lt;meta&gt; 用來描述網頁的許多屬性，例如作者、網頁內容描述等
                ul
                    li 由於搜尋引擎會讀取 &lt;meta&gt; 作為依據，此處對 Search Engine Optimization (SEO) 很重要
    section
        h3 &lt;body&gt;
        ul
            li 瀏覽器會將整個 &lt;body&gt; 區塊的內容呈現於畫面上
            li 一個網頁對應一個 &lt;body&gt;，但 &lt;body&gt; 可以用 &lt;iframe&gt; 的形式變成巢狀，也就是嵌入網頁
    section
        h2 What about CSS &amp; JavaScript?
        ul
            li 使用 &lt;style&gt; 撰寫 CSS
            li 使用 &lt;link&gt; 引入 CSS 檔
            li 使用 &lt;script&gt; 撰寫/引入 JavaScript
    section
        pre: code
            | &lt;html&gt;
            |   &lt;head&gt;
            |     &lt;link rel="stylesheet" href="styles.css" /&gt;
            |   &lt;/head&gt;
            |   &lt;body&gt;
            |    &lt;script type="text/javascript" src="app.js"&gt;&lt;/script&gt;
            |   &lt;/body&gt;
            | &lt;/html&gt;
section
    section
        h2 從 HTML &amp; CSS 到實際的網頁樣貌：
        h2 DOM 簡介
    section
        h3 Document Object Model (DOM)
        ul
            li 瀏覽器用來呈現 HTML Tag 的物件
            li 基本上一個 HTML Tag 對應一個 DOM
            li 每個 DOM 還記錄了由 CSS 所定義出來的樣式，讓瀏覽器知道該怎麼繪製這個 DOM
            li HTML Tree 和 CSS 生成的 Style Tree 結合，就變成了 DOM Tree
    section
        h3 DOM Tree
        img(src="images/2000px-DOM-model.svg.png", width=400)
    section
        h3 瀏覽器繪製網頁的順序
        ol
            li 瀏覽器讀取 HTML 文件
            li 將所有 HTML 的 Tag 組合成 HTML Tree
            li 碰到 CSS 時，將 CSS 規則解析成 Style Tree
            li 碰到 JS 時，暫停手邊工作等 JS 程式執行完再繼續
            li 將 HTML Tree 和 Style Tree 組合成 DOM Tree
            li 將 DOM Tree 繪製到視窗內
    section
        h3 CSS at Top, JS at Bottom
        ul
            li 由於瀏覽器一碰到 JS 就會暫停手邊的 DOM 生成，此時畫面看起來會卡住
            li 為了避免使用者不耐煩，建議把繁雜的 JS 放到 &lt;body&gt; 最下方
            li 把 CSS 擺在最上面，能加快 DOM Tree 也就是實際畫面的生成，增加可使用性
